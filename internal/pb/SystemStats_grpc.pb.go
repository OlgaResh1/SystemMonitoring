// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: SystemStats.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceStatClient is the client API for ServiceStat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceStatClient interface {
	GetFullStatStream(ctx context.Context, in *ServiceStatRequest, opts ...grpc.CallOption) (ServiceStat_GetFullStatStreamClient, error)
}

type serviceStatClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceStatClient(cc grpc.ClientConnInterface) ServiceStatClient {
	return &serviceStatClient{cc}
}

func (c *serviceStatClient) GetFullStatStream(ctx context.Context, in *ServiceStatRequest, opts ...grpc.CallOption) (ServiceStat_GetFullStatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceStat_ServiceDesc.Streams[0], "/systemstatserver.ServiceStat/GetFullStatStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceStatGetFullStatStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceStat_GetFullStatStreamClient interface {
	Recv() (*ServiceStatResponse, error)
	grpc.ClientStream
}

type serviceStatGetFullStatStreamClient struct {
	grpc.ClientStream
}

func (x *serviceStatGetFullStatStreamClient) Recv() (*ServiceStatResponse, error) {
	m := new(ServiceStatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceStatServer is the server API for ServiceStat service.
// All implementations must embed UnimplementedServiceStatServer
// for forward compatibility
type ServiceStatServer interface {
	GetFullStatStream(*ServiceStatRequest, ServiceStat_GetFullStatStreamServer) error
	mustEmbedUnimplementedServiceStatServer()
}

// UnimplementedServiceStatServer must be embedded to have forward compatible implementations.
type UnimplementedServiceStatServer struct {
}

func (UnimplementedServiceStatServer) GetFullStatStream(*ServiceStatRequest, ServiceStat_GetFullStatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFullStatStream not implemented")
}
func (UnimplementedServiceStatServer) mustEmbedUnimplementedServiceStatServer() {}

// UnsafeServiceStatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceStatServer will
// result in compilation errors.
type UnsafeServiceStatServer interface {
	mustEmbedUnimplementedServiceStatServer()
}

func RegisterServiceStatServer(s grpc.ServiceRegistrar, srv ServiceStatServer) {
	s.RegisterService(&ServiceStat_ServiceDesc, srv)
}

func _ServiceStat_GetFullStatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceStatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceStatServer).GetFullStatStream(m, &serviceStatGetFullStatStreamServer{stream})
}

type ServiceStat_GetFullStatStreamServer interface {
	Send(*ServiceStatResponse) error
	grpc.ServerStream
}

type serviceStatGetFullStatStreamServer struct {
	grpc.ServerStream
}

func (x *serviceStatGetFullStatStreamServer) Send(m *ServiceStatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ServiceStat_ServiceDesc is the grpc.ServiceDesc for ServiceStat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceStat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "systemstatserver.ServiceStat",
	HandlerType: (*ServiceStatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFullStatStream",
			Handler:       _ServiceStat_GetFullStatStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "SystemStats.proto",
}
